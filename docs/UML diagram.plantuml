@startuml "Orbital Defense Class Diagram"

package "Game Core" {
  abstract class GameObject {
    +Vector2 position
    +update()
    +render(surface)
  }

  class Planet {
    -int health
    -int resources
    -int shield_level
    -int radius
    -Surface image
    +take_damage(amount)
    +add_resources(amount)
    +upgrade_shield()
    +check_game_over()
  }

  abstract class Defense {
    -float orbital_radius
    -int cost
    -int damage
    -float fire_rate
    -int upgrade_level
    -float angle
    -int size
    -int shots_fired
    -int shots_hit
    -int total_damage_dealt
    +fire(current_time, enemies)
    #_fire_at_target(target)
    +upgrade()
    +calculate_aim(target)
    +detect_enemies(enemies)
  }

  abstract class Enemy {
    -int health
    -float speed
    -int damage
    -int reward
    -string movement_pattern
    -int radius
    -bool destroyed
    -int spawn_time
    -float closest_approach
    +move(planet_pos)
    +attack(planet)
    +take_damage(amount)
    +check_destroyed()
  }

  class Projectile {
    -list position
    -float angle
    -int damage
    -float speed
    -tuple color
    -bool destroyed
    -int radius
    +update()
    +check_collision(enemies)
  }
}

package "Defense Types" {
  class LaserTurret {
    -float range
    -float rotation_speed
    -float charge_time
    -tuple color
    #_fire_at_target(target)
    +charge_laser()
  }

  class ResourceCollector {
    -float collection_rate
    -int storage_capacity
    -int current_storage
    -tuple color
    +collect_resources(dt)
    +transfer_resources()
    +upgrade_capacity()
  }
}

package "Enemy Types" {
  class BasicEnemy {
    -float direct_speed
    +approach_direct(planet_pos)
  }

  class FastEnemy {
    -float evasion_chance
    +evade_defenses()
    +move(planet_pos)
  }
}

package "Management" {
  class WaveManager {
    -int current_wave
    -float difficulty_level
    -list enemy_types
    -float spawn_rate
    -int enemies_in_wave
    -int enemies_spawned
    -int last_spawn_time
    -bool wave_active
    -list wave_outcomes
    +start_wave()
    +spawn_enemies(current_time)
    -_calculate_wave_size()
    -_choose_enemy_type()
    +increase_difficulty()
    +wave_completed(success)
  }

  class GameStats {
    -int player_score
    -int waves_completed
    -int resources_collected
    -int enemies_defeated
    -float accuracy
    -int total_shots
    -int total_hits
    -dict damage_sources
    -dict upgrade_choices
    -list defense_placements
    -list enemy_survival_times
    -list resources_over_time
    -int session_start_time
    -SQLiteConnection conn
    -SQLiteCursor cursor
    +init_db()
    +update_stats(stat_type, value, **kwargs)
    +save_stats()
    +generate_report()
    +export_to_csv(filename)
  }

  class UIManager {
    -GameController game_controller
    -Font font_small
    -Font font_medium
    -Font font_large
    +render_ui()
    +show_game_over()
    +show_controls_overlay()
  }

  class StatsDisplay {
    -Surface screen
    -Font font_small
    -Font font_medium
    -Font font_large
    -SQLiteConnection conn
    -SQLiteCursor cursor
    -list sessions
    -list placements
    -list enemy_data
    +load_data()
    +generate_heatmap()
    +plot_resource_graph()
    +show_defense_effectiveness()
    +display_enemy_analysis()
    +render_stats_dashboard()
  }

  class GameController {
    -Planet planet
    -list defenses
    -list active_enemies
    -list projectiles
    -WaveManager wave_manager
    -GameStats stats
    -int game_time
    -class selected_defense_type
    -bool game_over
    -bool placement_mode
    -bool wave_in_progress
    -UIManager ui_manager
    -bool show_help
    +start_game()
    +process_input()
    +handle_click(pos)
    +update_game_state()
    +render()
    +end_game()
    +main_loop()
  }
}

' Inheritance relationships
GameObject <|-- Planet
GameObject <|-- Defense
GameObject <|-- Enemy

Defense <|-- LaserTurret
Defense <|-- ResourceCollector

Enemy <|-- BasicEnemy
Enemy <|-- FastEnemy

' Composition relationships
GameController *-- Planet
GameController *-- WaveManager
GameController *-- GameStats
GameController *-- UIManager

' Association relationships
GameController o-- Defense : manages
GameController o-- Enemy : manages
GameController o-- Projectile : manages

WaveManager ..> Enemy : creates
LaserTurret ..> Projectile : creates
Defense ..> Enemy : targets

GameController --> BasicEnemy
GameController --> FastEnemy
GameController --> LaserTurret
GameController --> ResourceCollector

GameStats --> StatsDisplay : provides data for

' Notes and explanations
note bottom of GameObject
  Base class for all visible 
  game entities
end note

note bottom of Defense
  Abstract base class for all
  defensive structures
end note

note bottom of Enemy
  Abstract base class for all
  enemy types
end note

note right of GameController
  Central controller that
  manages game state and
  coordinates all components
end note

note bottom of StatsDisplay
  Provides visualization of
  gameplay statistics after
  game over
end note

@enduml